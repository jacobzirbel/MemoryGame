{"version":3,"sources":["components/GameSquare/GameSquare.module.css","components/GameSquare/GameSquare.js","components/GameBoard/GameBoard.js","components/Header/Header.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","GameSquare","name","color","used","squareClicked","useState","elevation","setElevation","Paper","className","styles","paper","onClick","onMouseLeave","onMouseEnter","style","backgroundColor","height","width","getRandomColor","randomNumber","Math","floor","random","map","e","toString","join","makeSquaresInfo","amount","squares","push","id","active","GameBoard","scoreUp","gameOver","setSquares","boxClassNames","setBoxClassNames","every","clickedSquare","find","square","setTimeout","Box","display","flexWrap","justifyContent","bgcolor","css","maxWidth","maxHeight","margin","sort","key","Header","score","message","highScore","setHighScore","flexItemStyle","AppBar","position","Typography","variant","Toolbar","flexFlow","Footer","left","bottom","lineHeight","textAlign","App","setScore","setMessage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.43ad3c2f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"GameSquare_paper__NAQwZ\"};","import React, { useState } from \"react\";\nimport Paper from \"@material-ui/core/Paper\";\nimport styles from \"./GameSquare.module.css\";\nconst GameSquare = ({ name, used, color, squareClicked }) => {\n  const [elevation, setElevation] = useState(2);\n  return (\n    <Paper\n      className={styles.paper}\n      elevation={elevation}\n      onClick={() => squareClicked(name)}\n      onMouseLeave={() => setElevation(2)}\n      onMouseEnter={() => setElevation(12)}\n    >\n      <div\n        style={{\n          backgroundColor: color,\n          height: \"100%\",\n          width: \"100%\",\n        }}\n      >\n        {color}\n      </div>\n    </Paper>\n  );\n};\n\nexport default GameSquare;\n","import React, { useState } from \"react\";\nimport Box from \"@material-ui/core/Box\";\nimport GameSquare from \"../GameSquare/GameSquare\";\n\nconst getRandomColor = () => {\n  // Min 16 so I don't have to worry about single digit hex numbers (0-f)\n  // Max 216 so colors don't get too light\n  const randomNumber = () => Math.floor(Math.random() * 200) + 16;\n  let rgb = [randomNumber(), randomNumber(), randomNumber()];\n  return \"#\" + rgb.map((e) => e.toString(16)).join(\"\");\n};\n\nconst makeSquaresInfo = (amount) => {\n  const squares = [];\n  while (amount--) {\n    squares.push({\n      id: amount,\n      name: amount,\n      color: getRandomColor(),\n      used: false,\n      active: true,\n    });\n  }\n  return squares;\n};\n\nconst GameBoard = ({ scoreUp, gameOver }) => {\n  const [squares, setSquares] = useState([...makeSquaresInfo(12)]);\n  const [boxClassNames, setBoxClassNames] = useState(\"\");\n\n  const squareClicked = (name) => {\n    if (!squares.every((e) => e.active)) return;\n    const clickedSquare = squares.find((square) => square.name === name);\n    if (clickedSquare.used) {\n      setBoxClassNames(\"shake\");\n      clickedSquare.active = false;\n      gameOver();\n      setTimeout(() => {\n        setSquares([...makeSquaresInfo(12)]);\n        setBoxClassNames(\"\");\n      }, 1500);\n    } else {\n      clickedSquare.used = true;\n      scoreUp();\n    }\n  };\n\n  return (\n    <Box\n      className={boxClassNames}\n      display=\"flex\"\n      flexWrap=\"wrap\"\n      justifyContent=\"center\"\n      bgcolor=\"background.paper\"\n      css={{ maxWidth: 900, maxHeight: 860, margin: \"30px auto\" }}\n    >\n      {squares\n        .sort(() => Math.random() - 0.5)\n        .map((square) => {\n          return (\n            <GameSquare\n              key={square.id}\n              name={square.name}\n              used={square.used}\n              color={square.color}\n              squareClicked={squareClicked}\n            />\n          );\n        })}\n    </Box>\n  );\n};\n\nexport default GameBoard;\n","import React, { useState } from \"react\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst Header = ({ score, message }) => {\n  const [highScore, setHighScore] = useState(0);\n\n  if (score > highScore) setHighScore(score);\n\n  const flexItemStyle = { width: \"33%\" };\n  const flexContainerStyle = {\n    display: \"flex\",\n    flexFlow: \"row no-wrap\",\n    justifyContent: \"space-between\",\n    width: \"100%\",\n  };\n\n  return (\n    <div>\n      <AppBar position=\"static\">\n        <Typography variant=\"h4\">Memory Game!</Typography>\n        <Toolbar>\n          <Typography variant=\"h6\" style={flexContainerStyle}>\n            <span style={flexItemStyle}>Don't click the same color twice!</span>\n            <span style={flexItemStyle}>{message}</span>\n            <span style={flexItemStyle}>\n              Score: {score} | High: {highScore}\n            </span>\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst Footer = () => {\n  const footerStyle = {\n    position: \"fixed\",\n    left: 0,\n    bottom: 0,\n    width: \"100%\",\n    height: \"45px\",\n    lineHeight: \"45px\",\n    textAlign: \"start\",\n    backgroundColor: \"#3f51b5\",\n  };\n  return (\n    <Typography variant=\"subtitle2\" style={footerStyle}>\n      <span style={{ margin: \"0 10px\" }}>By Jacob Zirbel: A Programmer</span>\n    </Typography>\n  );\n};\n\nexport default Footer;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport GameBoard from \"./components/GameBoard/GameBoard\";\nimport Header from \"./components/Header/Header\";\nimport Footer from \"./components/Footer/Footer\";\n\nconst App = () => {\n  const [score, setScore] = useState(0);\n  const [message, setMessage] = useState(\"Click a color to start\");\n\n  const scoreUp = () => {\n    setScore(score + 1);\n    if (score === 11) {\n      setMessage(\"You win!!\");\n    } else {\n      setMessage(11 - score + \" to go!\");\n    }\n  };\n\n  const gameOver = () => {\n    setMessage(\"Wrong! - Try Again\");\n    setScore(0);\n  };\n\n  return (\n    <div className=\"App\">\n      <Header message={message} score={score} />\n      <GameBoard scoreUp={scoreUp} gameOver={gameOver} score={score} />\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}